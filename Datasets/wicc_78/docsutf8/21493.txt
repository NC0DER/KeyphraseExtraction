Integración de técnicas orientadas al cliente y técnicas formales en el desarrollo de software con UML y RUP
﻿Integración de técnicas orientadas al cliente y técnicas formales en el 
desarrollo de software con UML y RUP 
 
Favre, Liliana; Leonardi, Carmen; Mauco, Virginia; Felice, Laura; Pereira, Claudia;  Martínez, Liliana 
INTIA 
Facultad de Cs. Exactas 
UNCPBA 
 
1. Introducción 
 
En los últimos años UML ("Unified Modeling Language") se ha impuesto  como un estándar de–
facto para expresar modelos orientados a objetos. Es un lenguaje diseñado para especificar, 
visualizar, construir y documentar “artefactos” de sistemas de software [Booch’99].  
A diferencia de los lenguajes visuales que lo precedieron, UML posee una definición semántica 
más precisa que combina notación gráfica,  reglas bien formadas expresadas en OCL [OMG’01] y 
lenguaje natural. Esta definición semántica da una estructura rigurosa al lenguaje aunque aún varias 
de sus construcciones están definidas  débilmente. 
Si bien UML estandariza un lenguaje de modelamiento y no impone ningún proceso de 
desarrollo fue concebido pensando en procesos dirigidos por casos de uso, centrados en 
arquitecturas, iterativos e incrementales. En noviembre de 2001 OMG presenta “Software Process 
Engineering Metamodel” (SPEM) que es usado para describir un proceso de desarrollo de software 
concreto o una familia de procesos que usan UML. El  proceso más popular que se ajusta a SPEM 
es  RUP (“Rational Unified Process”) [Krutchen’00]. 
 La existencia de un lenguaje de modelamiento estándar como UML brinda la posibilidad de 
concentrar esfuerzos en la definición de potentes herramientas CASE UML. Pueden mencionarse 
entre las numerosas existentes en el mercado a Argo/UML, Together, GDPro, Stp/UML, Rational 
Rose, MagicDraw/UML, Rhapsody y Objecteering. Las mismas  asisten en el análisis, diseño e 
implementación de sistemas orientados a objetos. Proveen facilidades, si bien limitadas, para 
homogeneizar diagramas y realizar comprobaciones que detecten inconsistencias y errores como 
asimismo para  procesos de ingeniería directa (forward engineering) e inversa (reverse 
engineering).  
    Estas herramientas evolucionan constantemente, con el objeto de cubrir aspectos no considerados 
y así brindar asistencia  en las distintas etapas del proceso de desarrollo de software. Por ejemplo, 
las mismas aún no brindan una completa asistencia para la construcción de modelos del negocio 
durante las primeras etapas de desarrollo en donde la interacción con los stakeholders es crucial. 
Por otro lado, la falta de una semántica formal para UML dificulta la  validación de modelos UML 
y  el análisis de consistencia entre las diferentes vistas del sistema. Ésto crea dificultades en el 
desarrollo de sistemas complejos y críticos donde es crucial realizar un análisis riguroso de las 
propiedades  expresadas por los modelos y  detectar ambigüedades e inconsistencias desde los 
primeros niveles de un diseño. Asimismo, los procesos de generación de código son bastante 
limitados y  no permiten transformar toda la información registrada en los modelos UML.  La 
ingeniería inversa soporta un subconjunto de la notación UML y requiere de la habilidad del 
programador para mantener la integridad entre modelos UML y el código. Tampoco brindan 
asistencia para la optimización de modelos (refactoring). 
Teniendo en cuenta los aspectos mencionados anteriormente,  se propone en esta investigación 
definir las bases para extender la funcionalidad de las CASE UML existentes. Este proyecto 
pretende definir modelos y estrategias que partiendo desde el modelo de negocios permitan obtener 
código orientado a objetos. Para esto se presenta la incorporación de modelos de requisitos 
orientados al cliente y un conjunto de heurísticas para poder guiar la construcción del modelo de 
negocios propuesto por RUP, más concretamente los Business Use Cases y el Modelo de Objetos 
del Negocios. Asimismo, se presenta la integración de UML con técnicas formales que permitiría el 
uso de verificación formal y  la definición de procesos rigurosos de ingeniería directa e inversa que 
tiendan a la automatización facilitando el reuso y la evolución del software.  
Se describen en la sección 2 la propuesta para la definición de modelos del negocio a partir de 
modelos de requisitos orientados al cliente. La sección 3 describe las bases de la integración de 
UML con técnicas formales y los resultados logrados en cuanto a la definición de procesos 
rigurosos de generación de código. La sección 4 presenta conclusiones y extensiones de esta 
investigación.  
 
2. Definición del Modelo de Negocios de RUP a partir de modelos orientados al cliente 
 
“Se puede considerar  al problema del desarrollo de software como un problema de construir 
un artefacto. Este  artefacto  será instalado en el mundo con el cual va a interactuar [Jackson’95]”. 
Esa parte del mundo en la cual los efectos del artefacto serán  sentidos,  evaluados  y aprobados en 
caso de  éxito, se denomina Dominio de Aplicación o Universo de Discurso, UofD [Leite’95]. El 
UofD es el contexto general en el cual el software será desarrollado, operado y mantenido. Incluye 
todas las fuentes de información y personas o sectores relacionados con la aplicación. El UofD es 
donde se originan los requisitos [Jackson’95; Jacobson’99], por lo que, sino se define 
apropiadamente no será posible enfocarse en los mismos. Con este objetivo, se propone para esta 
etapa modelar el UofD a partir de modelos en lenguaje  natural y orientados al cliente, favoreciendo 
la interacción con el cliente, muy importante en esta etapa. Estos son:  el Modelo  Escenarios para 
definir el comportamiento del UofD [Leité97],  el modelo  del Léxico Extendido del Lenguaje 
(LEL) que describe el vocabulario del mismo [Leité95], y finalmente el Modelo de Reglas de 
Negocio que  describe las  políticas de la organización [Leonardí98, Leité98].  
A partir de estos modelos se pueden derivar un modelo conceptual  de objetos que permite a 
los ingenieros de software visualizar  el UofD en términos de los conceptos que se manejarán  a lo 
largo de todo el proceso de desarrollo, haciendo que  la transición desde el modelado conceptual al 
diseño e implementación sea un  proceso más natural. En el contexto de RUP y UML este modelo 
es el modelo de Negocios.  
Manipular esta información para obtener un   modelo conceptual de objetos   no es una tarea 
trivial, ya que debe filtrarse y modelarse en términos de los conceptos que  se manejarán en la 
solución, en nuestro caso, objetos  y relaciones.  La definición de clases es un proceso dual, así 
como se definen clases  determinando abstracciones relevantes para el sistema,  es igualmente 
importante poder descartar clases. Por esta razón, es crucial   poder  manipular la información de los 
modelos basados en lenguaje natural para poder definir y descartar las abstracciones. Por esta razón, 
en esta etapa se propone una estrategia basada en heurísticas que asista al ingeniero en la 
construcción del modelo de negocios a partir de los modelos de  requisitos. El uso de las heurísticas 
mejora los aspectos de traceability entre los modelos generadores y los generados. El siguiente 
gráfico muestra las actividades de esta etapa, en donde en cada una de ellas se define un conjunto de 
heurísticas  que guían la  construcción del Modelo del Negocio. La estrategia completa de esta etapa 
se describe en [Leonardi'03]. Actualmente se han desarrollado prototipos que permiten la semiautomatización de ciertos aspectos de esta etapa [Petersen'01; Antonelli'99], pero no en el contexto 
de RUP/UML. 
 
 3.  Ingeniería directa e inversa de modelos estáticos UML 
La falta de una semántica formal para UML pone límites a la potencia de las herramientas CASE 
UML. Éstas proveen poco soporte para la validación de modelos UML especificados en OCL y 
además no permiten transformar toda la información registrada en los modelos UML. Por ejemplo, 
una clase especificada en OCL brinda información importante para la identificación de clases y 
“frameworks” que puedan ser adaptados y reutilizados. A partir de diagramas de clase con 
especificaciones en OCL, también podrían generarse precondiciones y postcondiciones de 
operaciones e invariantes de una clase en lenguajes orientados a objetos que las soporten, como por 
ejemplo EIFFEL.  
Una alternativa para evitar estas limitaciones es integrar a UML con técnicas formales. Se 
propone una integración con especificaciones algebraicas. Las bases de este enfoque son la 
definición de un lenguaje de modelamiento algebraico, la definición de un modelo de componentes 
reusables y de procesos transformacionales que permiten transformar modelos UML/OCL a 
especificaciones algebraicas y a código orientado a objetos.  
Con respecto a la formalización algebraica se optó por diseñar un lenguaje de modelamiento, 
denominado GSBLoo [Favre’01]   cuyas primitivas reflejaran los conceptos de UML en forma 
directa. La característica esencial y original del mismo es que su diseño está centrado en 
abstracciones de relaciones (relation-centric). El lenguaje provee una jerarquía de tipos 
constructores para relaciones de dependencia, agregación, composición, y asociaciones. El lenguaje 
puede verse como un “intermediario” entre UML y otros lenguajes algebraicos, en particular se 
trabaja con los lenguajes CASL [COFI’00 ] y RSL [George’95  ].  
Con respecto a la especificación formal de componentes reusables se definió un modelo que 
integra, en diferentes niveles de abstracción, especificaciones formales y código orientado a objetos. 
Un componente reusable consiste de tres diferentes niveles de abstracción (especialización, 
realización e implementación) que conectan especificaciones algebraicas incompletas, 
especificaciones algebraicas completas y  código orientado a objetos respectivamente. El primer 
nivel consta de dos vistas, una algebraica y otra en OCL. Se definieron formalmente operadores de 
reuso (Rename, Combine, Extend y Hide). A partir del modelo se definió un método para el reuso 
de diseños y código basado en la  adaptación e integración de componentes en los tres niveles.  En 
particular para el método RAISE [George’95] para el cual no se hace referencia explícita a la 
reusabilidad de especificaciones, se ha definido un modelo [Felice’03] para describir la estructura 
de una componente reusable en los distintos niveles de abstracción. Este modelo permitirá la 
Definición
 Modelo
Business
Use-Cases (BUC)
Identificación de
clases
Refinamiento de
Responsabilidades
de las clases
Definición
Diagrama de
 Objetos
LEL
modelo
escenarios
meta modelo LEL
meta modelo BUC
Modelo
BUC
Reglas de Negocio no
funcionales
Lista de clases
heurísticas de refinamiento
heurísticas de Identificación
clases
heurísticas
definición BUC
Lista  de
clases refinadas
heurísticas definición
diagrama
Reglas de
Negocio funcionales
diagramas de Actividades  y
colaboración
Diagrama
 de
Objetos Realización del
modelo
de  BUC
diagramas de
interación o
actividades
heurísticas
 definición
integración de especificaciones de componentes en el lenguaje RSL y clases concretas en un 
lenguaje orientado a objetos. 
El  proceso de generación de código se basa en establecer correspondencias formales entre 
diferentes lenguajes.  Las transiciones entre los diagramas UML y todas las especificaciones 
intermedias se realizan aplicando operadores de transformación que preservan la integridad entre 
especificaciones y código. Toda la información contenida en los modelos (por ejemplo 
asociaciones,  multiplicidades y “constraints” OCL) tiene su contrapartida en  las especificaciones 
algebraicas y tendrá implicancias en el código generado.  
El proceso traduce en una primera etapa, modelos estáticos UML a una especificación algebraica. 
Un aspecto importante a destacar en esta etapa es la transformación de precondiciones, 
postcondiciones e invariantes de clases OCL  a axiomas en la especificación algebraica. Se obtiene 
así una especificación a partir de la cual es posible realizar un análisis riguroso del comportamiento 
modelado con técnicas de razonamiento basadas en especificaciones algebraicas.  La especificación 
obtenida será la base para la generación de implementaciones que se construyen a partir de 
esquemas de código reusables y transformaciones de especificaciones  a código orientado a objetos. 
Se prevé abordar refactoring de modelos UML y la ingeniería inversa de sistemas legacy a partir 
de las bases propuestas. 
 
  
4. Conclusiones 
 
Este proyecto pretende integrar las experiencias obtenidas por dos líneas de investigación que ya 
han tenido resultados en forma independiente: por un lado trabajos desde el área de ingeniería de 
requisitos [Leonardí03, Leonardí01, Leonardí98, Leité98] y por el otro de especificaciones 
formales [Favré02, Favré01, Maucó02]. De esta forma, la estrategia integraría modelos 
orientados al cliente que ya han sido probados en el área de ingeniería de requisitos en el contexto 
de un desarrollo riguroso de software orientado a objetos. Resultados parciales de esta integración 
se encuentran en [Felicé02]. Para esto es necesario no sólo lograr un mayor grado de formalización 
en las heurísticas sino también refinar las heurísticas para obtener especificaciones más precisas de 
los modelos (por ejemplo, profundizar las heurísticas de tratamiento de las reglas del negocio para 
generar constraints en OCL).  Estos modelos son la entrada para el proceso de ingeniería forward.  
Asimismo, también se trabaja en la prototipación de etapas claves vinculadas a las extensiones 
propuestas. Los resultados logrados muestran que sería factible extender la funcionalidad de las 
herramientas CASE existentes y aumentar el grado de automatización de los procesos que soportan. 
Las actividades posteriores incluirán la integración de estos resultados con CASE UML.  
 
