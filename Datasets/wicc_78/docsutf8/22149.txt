Frameworks para el desarrollo de sistemas multi agentes
﻿
En esk artículo se presenta un análisis de los frameworks Brainstorm/J y Framas 
desarrollados en el Instituto de Sistemas ISIST AN. El análisis tiene como objetivo 
determinar las ventajas y las limitaciones de cada uno de ellos en el desarrollo de 
di"t"!"so' !inos de agentes inteligentes. Entre los tipos estudiados se encuentran agentes 
f<<acti\!n", cognitivos, y móviles. 
:;ntroduccióf¡ 
Varias experiencias en el desarrollo de agentes han sido realizadas en los últimos años. ll'itas 
han origifliidu la necc',idad del crecimiento del área de ingenieríh de software, espedali:r.ándcL.t 
para d des'!m¡Jlo de sistema;.; multi-agentes. Erl este; Ct)mexto, arquitectllrtls de sOfrW:!f' 
ambientes especializados para ei desarrollo de agentes fueron propuestos, juntamente ,:C,,1 
metodologías especialmente dirigidas a este tipo de sistemas. 
Dentro de las herramientas de desarrollo de agentes, algunos frameworks f!.leron realizados 
<:llntemplandu generaimente caracteríí.ticas específicas tales como movilidad o reacción, Los 
:'--'lnlr:'works permitee¡ no sólo el desarrollo de agentes con estas características sine· la 
,Ji: rliaci6n (1,; i:Ódigg). generalme.nte por especialización, paa mnldearlü a difert'ntee dC01!!'jP:': 
,.::) ;',te con!e"tG, do.. frameworks des3!"fi)iJacios er;o el 1nstituHl de Sissemas ¡ SIST 1" N d: 
'. Jn¡vcrr:idat! Nacional del Centro han sido rrsteados y comparados en este artículu. 
Fstc artÍCulo está organizado de la siguiente manera. Seguidamente, dos secciones presentan los 
JSpcctos m¡ís relevantes oe cada uno dé los fnmcworh. A partir de ellos un an:ílii:b ,> 
prcc('niado ;\ !LlVés dI" cemoaraci[lIll:s ('·"PIIcífi('as, 
El Framwnrk FraMllS 
Para él desarrollo de FraMas [Avancini OOJ se utilizó un enfoque hottom-up, es decir que 
rril11err) se construyeron aplicaciones de agente:; particulares y se fuu ahstrayendo 
;'pmportamicnlo común de estas para generar las clases del framework. 
:\ metodolngf,1 de rli',eño seleccionadil es b razón por Ié! cual e! framework no está bas:td:l en 
¡ iñllna arqujj,,,cturll de diseño particular. sino que consiste en !:n sistema orientado :: ohjj:;):··: 
oi,)nde los rr:,t;lemas de diseño se solucionaron utilizando sólc patrones aplicables i,..icia[:n  ñk 
a sistemas mulli-agentes particulares. 
h1 .::stc framework. un agente posee un comport.:tmiento básico al cual :-;e le adic;ona 
comp()rtal11it''11(l ¡nle :igemm>. l:s eSTel:ommortamient() d (iue define al ohjet(; é!l!en!" C( l:r.n 
i ntcligentc. 
El fr:·unework posee una clase llamada Bl/sic.AgentActiol/s la cual dehe ser heredada peor el 
objeto inicial del ag''ñte. El objeto inicial es aquel que proVG\! todo el compor:amicnt(. no 
inteligente. o sea. el conjunto de acciones simples que es capaz de ejecutar cuando el 
componente <le decisión lo indique. 
i 'n Frrd\1:ls. e' comportamiento inteligente corresponde a la comunicación, selecció!l dd la 
'1f/':xima ,1cl'Íón y aprendizaje de las preferencjaa; del usuario. Este comportamiento tí!"ico de 
::.I!enles ..:.:' :lIiir;nna por medio de decor:ldorc-s (también conocidos como wrappcr,,). Esta ma r1e"'; 
de agregar comportamiento a un agente está definida por el patrón de diseño Decoraior l Garrlma 
lJ'i]_ 
I J patrón Decorato, también conocido como !V¡'llpper permite agregar dinár,1ici1m,,ñ!(' 
re:-;ponsahilldades a l'n objeto. Lo:,; de.:oradores provven una alternativa tlcxihle (J la herenc;;¡ 
para exlcnc1er funcionalidad. En !a figura 1 se presenta la estructura genérica del patrón 
f)cco/"ll!or_ 1\ nartir de este patrón de diseño, las acciones básicas que un agente puede rea!izar 
Wicc 2000 - lJ4 
encapsuladas en un objeto BasicAgentActions puede ser decorado dinámicamente con otros 
objetos que son responsables de la comunicación entre agentes, el manejo de preferencias, las 
reacciones, las decisiones deliberativas, etc. 
Component 
·operationO ' 1 

 
I I 
ConcreteComponent Decorator +component 

operationO  opePationO .................................. ................... 
component. operationO; 
lf 
I 1 
ConcreteDecoratorA ConcreteDecorator8 
l_addedState  operronO·············· 

operationO  addedBehaviorO 
.--------".. 
superO;  ¡ 
added8ehaviorQ; 
Figura 1. Bases del Framework FraMaS. 
El Framework Brainstorm/J 
Ei framework Brainstorm/J [Zunino 00] ha sido desarrollado en el lenguaje Java siguiendo los 
lineamientos de la arquitectura de agentes Brainstorm [Amandi 97]. Esta arquitectura prescribe 
agentes compuestos de un objeto base responsable de las acciones simples y determinísticas de 
los agentes y un conjunto de meta-objetos que interfieren en su computación haciendo que estas 
acciones sean combinadas convenientemente para alcanzar objetivos específicos, o para 
adicionar funcionalidad inherente a agentes inteligentes. 
Las ventajas de este enfoque es que no son necesarias modificaciones en el código para 
modificar la estructura de un agente, ya que todo comportamiento es administrado a través de 
retlexión computacional. 
La figura 2 muestra una estructura básica de la arquitectura Brainstorm, la cual fue mapeada a 
Java por el framework Brainstorm/J. 
Figura 2. Esquema parcial de la arquitectura Brainstorm. 
Wicc 2000 - 95 
Comparación 
Ambos frameworks permiten construir sistemas multi-agentes en el lenguaje Java. La primera 
diferencia es su concepción. Brainstorm/J mapea componentes arquitecturales de Brainstorm al 
lenguaje Java, teniendo que soportar para ello un sistema de meta-objetos. FraMaS es concebido 
p1rt!r de la abstracción de implementaciones específicas. Los resultados de las 
experimentaciones han mostrado que FraMaS tiene una orientación más marcadas haci2. agentes 
de interfaz, resultado proveniente de la utilización de implementaciones en este contexto en la 
abstracción de clases del framework. 
En cuando a su funcionalidad, la tabla presentada a continuación resume varios aspectos de 
estos frameworks. 
l- Descripción Brainstorm/J --FraMaS 
l Comunicación Mensaje send esplícito Mensajes entre objetos 
i Movilidad Dévil (uso de mü) Dévil (uso de rmi) 
I Deliberación Manejo de conversaciones Soporte para incorporación de I ! Estrategias deliberativas estrategias deliberativas.   .. __ .- ! 
¡ Reacción Uso de templates Implementación esxplícita I [ 
Aprendizaje Interferencia del meta-objeto Implementación explícita ----, I 
I 

 learnmg en el prooeso 
deliberativo 
! 
Tabla 1. Comparación de Brainstom/J y FraMaS. 
! 
; 
La tabla anterior muestra a!gunos aspectos de funcionalidad junto con su solución. Se puede 
obseIVar que FraMaS implementa una forma de comunicación más natural en ambiente 
orientados a objetos, pero ofrece menos soportes en aspectos deliberativos. 
Otros puntos importantes considerados en el análisis son el tiempo de respuesta a un pedido 
determinado y la complejidad de modificación de las estructuras comportamentales de los 
agentes en tiempo de ejecución. El resultado del análisis es el siguiente: 
¡--------:---;--:-----r-------;;;:----:-----'-;;-------'¡-----;;:;-----;;;-----l 
Descripción I Brainstorm/J ¡ FraMaS 
Tiempo de resp. ¡ 10% más por uso de meta-objetos I 4% más por delegación 
Modificabilidad I Transparente I Control de wrappers 
Tabla 2. Usabilidad de los frameworks. 
Conclusiones 
En este artículo fue presentado un análisis comparativo entre dos frameworks para sistemas 
multi-agentes que fueron concebidos utilizado dos metodologías diferentes: abstracción por 
ejemplos y dirección por una arquitectura específica. Este análisis conjuntamente con las 
exneriencias realizadas han mostrado la utilidad de cada uno de ellos en diferentes contextos de 

....querimientos de sistemas de agentes. 
