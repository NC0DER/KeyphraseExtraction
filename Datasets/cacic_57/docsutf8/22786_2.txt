Hacia la prueba de corrección de clases
﻿
La actividad de desarrollar programas orientados a objetos, los cuales involucran referencias a memoria, pueden introducir errores difíciles de identificar con el uso de un razonamiento operacional. Esto da
lugar a la necesidad de contar con un marco teórico para la prueba de corrección de clases.
A partir de esta motivación y basandonos en la idea propuesta por B. Meyer en [Meyer 03a], trabajamos
en el desarrollo de una semántica formal para probar, matemáticamente, que clases equipadas con contratos
satisfacen los mismos.
Keywords: Métodos Formales, Orientación a Objetos, Prueba de Corrección, Contratos, Funciones de
Abstracción.
Abstract
The activity of object oriented program development, which may involve references variables, is prone
to errors which are hard to find by operational reasoning. Hence the need for a theoretical framework for
proving class correctness.
Given this motivation and based on ideas proposed by B. Meyer in [Meyer 03a] we develop a formal
semantics for mathematically proving that contract equipped classes satisfy their specifications.
Keywords: Formal Methods, Object Orientation, Correctness Proofs, Contracts, Abstraction Functions.
1. Introducción
Tal como se lo muestra en varios trabajos ([EWD 1036], [EWD 76]), el razonamiento operacional
sobre programas es una actividad no sólo mentalmente desgastante, sino también proclive a la introducción de errores. Si además se consideran aquellos programas que involucran variables conteniendo
referencias a memoria, la situación es aún peor ya que aparecen casos de aliasing. Para ilustrar sobre
1717
los problemas que acaecen cuando se trabaja con referencias a memoria, damos a continuación un
ejemplo.
Supongamos que se define una clase A de la siguiente manera:
class A
feature{NONE}
f:A
g:A
feature{A}
get f is
do
Result := f
end
Supongamos además que tenemos dentro de A un método cuya implementación se compone de las
siguientes sentencias:
S; f := g; a := f.get f
donde f y g son los atributos que arriba declaramos.
Ahora, dada esta otra secuencia de instrucciones ( siendo S, f y g los mismos que en la implementación anterior ):
S; a := g.get f
Se plantea el interrogante si en ambas implementaciones el valor de a al finalizar la ejecución de
las sentencias respectivas será el mismo.
En este punto quizá el lector este receloso de responder afirmativamente. Tal vez resulte más
interesante preguntar por que la proposición anterior no es verdadera para el caso general. Con las
herramientas desarrolladas en este trabajo se puede dar una respuesta (formal) a este interrogante.
La necesidad de una semántica para la prueba de corrección de programas se pone de manifiesto
además cuando queremos probar que clases equipadas con contratos satisfacen los mismos. Pero esto
no es posible si no se cuenta con un marco teórico adecuado.
Consideremos por ejemplo el método make de la clase LIST SET la cual implementa el álgebra de los conjuntos usando listas, y make crea un objeto representando el conjunto vacío. Ahora
preguntemonos cual es la postcondición de este método. Con los constructores sintácticos de Eiffel
(o de cualquier otro lenguaje de programación imperativo) no es posible formalizarla, es necesario
contar con un mayor poder expresivo en los contratos. Tal requerimiento es satisfecho en este trabajo, pero todavía esto no es suficiente. Suponiendo que en las aserciones se permite la utilización de
funciones matemáticas abstractas y que tenemos un atributo Ds: LIST[G] el cual esta destinado
a contener los elementos del conjunto, es probable que se quiera expresar la postcondición de make
del siguiente modo: Ds = ∅ .
Sin embargo la expresión anterior sufre dos inconvenientes. El mas leve es que es dependiente
1718
de la implementación, un conjunto podría quizá estar representado mediante un atributo con diferente
nombre, o peor aún podrá representarse simultáneamente usando un árbol y una pila, por ejemplo, por
lo que mas allá del nombre la postcondición anterior no nos sirve. Entonces resulta un tanto contradictorio pensar en dos post condiciones diferentes para dos métodos cuyo comportamiento esperado
es exactamente el mismo. Pero mas grave aún, la expresión anterior se encuentra incorrectamente
tipada, estamos igualando un objeto del tipo LIST con un conjunto.
Es importante tener clases probadas, en especial aquellas que implementan álgebras como enteros,
árboles, grafos, etc, porque son utilizadas exhaustivamentes por el programador de aplicación, quien
construye su software basándose en estas.
Uno puede optar por omitir estas pruebas de corrección, pero trayendo consigo el riesgo de errores
graves para la consistencia de los programas. El lector puede intentar analizar el siguiente método
(implementado en el lenguaje Eiffel) que invierte el orden de los elementos de una lista e intentar
determinar si el mismo cumple su propósito1:
reverse is
-- Change the list to have the same elements in reverse order
localprevious, next: NODE[G]
do
from
next := first
until
next = Void
loop
previous := first
first := next
next := next.right
first.put right(previous)
end
El lector perceptivo, habrá notado que el error es difícil de encontrar. Pero lo que es más grave
aún, es que el cliente del método asume (como es de esperar) que el mismo está correctamente implementado, mientras que para el caso considerado el simple hecho de invocar a reverse y luego
recorrer la lista dejará a su programa en un loop infinito. Es importante notar que errores como estos
pueden encontrarse en varios programas en uso.
El esfuerzo que requiere la correccion matemática de componentes de software es justificado por
el amplio reuso que los mismos poseen. Y si tales piezas de software han de ser usadas en sistemas
críticos, esta justificación se hace necesidad.
En el presente trabajo, se introducen las nociones básicas del formalismo con el objetivo de exponer luego la semántica definida. Además, se presenta la noción de modelo asociado a una clase con el
propósito de servir como función de abstracción de forma tal de especificar los contratos de una clase,
resolviendo los inconvenientes que presentamos anteriormente. El trabajo concluye con un ejemplo
1la clase NODE contiene un campo right que mantiene una referencia al próximo elemento de la lista. El método
put right(x) actualiza dicho campo con el valor referenciado por x
1719
práctico, donde se hace uso del formalismo desarrollado para establecer la corrección de un método.
2. El formalismo básico
En esta sección se definen algunos de los conceptos utilizados en el presente artículo. Los mismos
se introducen en [Meyer 03a] y se encuentran definidos con mas detalles en [Blanco 05], en donde
además se corrigen algunos errores del trabajo original.
Habiendo introducido estos conceptos, se describirá la semántica formal asociada a un subconjunto del lenguaje de programación Eiffel.
2.1. Nociones preliminares
Las abstracciones aquí presentadas sirven de base para la definición de la semántica sobre la
cual se realizan las pruebas matemáticas de corrección de clases equipadas con contratos al estilo
Eiffel.
A continuación se brinda una definición de cada uno, y cual es su significado en este contexto de
prueba.
Address: Denota el conjunto de todas las posibles direcciones abstractas de memoria.
Objects: Denota el conjunto de todas las direcciones que pueden albergar objetos. Cabe destacar que
Objects ⊆ Address.
Expanded: Denota el conjunto de todos los valores que no son referencias; por ejemplo los enteros, los
booleanos, etc.
Values: Denota el conjunto de todos los posibles valores de un sistema; es decir Values .= Objects ∪
Expanded.
States: Denota el conjunto de todos los posibles estados de un sistema. Un elemento s ∈ States se
define como una tupla cuyo primer componente es un conjunto de funciones (Objects 7→ Objects) que
modela las variables involucradas en el sistema; y la segunda componente es un conjunto que contiene
los objetos presentes en ese estado.
Así en este sistema formal una variable representara una función con alguno de los siguientes
perfiles:
Objects 7→ States 7→ Objects, para aquellas que constituyan una referencia a otros objetos.
Objects 7→ States 7→ Expanded, para aquellas las cuales contengan un valor subclase de EXPANDED,
como por ejemplo las del tipo INTEGER. Donde Expanded es el conjunto formado por la unión disjunta
de los conjuntos matemáticos B, R, etc.
Éste enfoque expresa el hecho de que el objeto el cuál una variable f referencia o el valor que ésta
contiene (en el caso que f sea de tipo EXPANDED) en una instancia de la ejecución de un programa
Eiffel, varia según el estado y el objeto en donde el identificador f se halle.
1720
2.1.1. Interpretando cambios de estados
Un programa orientado a objetos consiste de una secuencia de cambios de estados que reflejan la
ejecución de determinados constructores.
Así la invocación a un procedimiento r(a) del objeto x (x.r(a)), el cual produce un cambio de
estado en nuestro sistema, podremos modelarlo como una función de la forma A 7→ States 7→ States
donde A denotan los parámetros del procedimiento y la función States 7→ States describe el nuevo
estado producido por la ejecución del procedimiento en términos del estado previo.
De esta manera los posibles cambios de estados, dado que un estado está definido como un conjunto de objetos y una colección de funciones sobre esos objetos, son
1. Cambiar una de las funciones en el primer componente del estado; al nivel mas básico esto significa
cambiar el valor de una de las funciones en uno de sus posibles argumentos.
2. Cambiar el conjunto de objetos presente en la segunda componente del estado. 2
2.2. Semántica de los operadores básicos
A continuación presentamos la semántica formal de un subconjunto del lenguaje Eiffel. Esto
permite “mapear” programas a funciones matemáticas que los modelan. De esta forma se define una
semántica funcional de un lenguaje imperativo, permitiendo de esta manera introducir la noción de
función de abstracción en este ultimo paradigma, como veremos mas adelante.
2.2.1. El operador de asignación
La operación fundamental en el paradigma imperativo, transversal al orientado a objetos, es la
asignación. En nuestro modelo, la asignación, como transformador de estados básico, estará representada por una función denominada “sustitución de funciones” y denotada como “:=”, cuyo perfil
es (Objects 7→ States 7→ Objects) 7→ (Objects 7→ States 7→ V alues) 7→ Objects 7→ States 7→
States. Así, se permite una sustitución de la forma
f := E
De esta manera definimos la semántica del operador de asignación de Eiffel, mediante la función
:=, del siguiente modo 3
Regla 1 (asignacion)
f := g
.
= [f := g]
El operador de substitución de funciones, intuitivamente, dado un objeto o y un estado s, retorna
un estado s′ en donde solo cambia f para un único elemento de su dominio como se muestra en la fig.
1.
Para nuestro trabajo utilizaremos las siguientes propiedades básicas de este operador, cuya demostración puede ser encontrada en [Blanco 05] junto con una definición formal de :=.
2Notar que esto no implica que se modifique el conjunto Objects definido anteriormente.
3En adelante para denotar la semántica asociada a un constructor del lenguaje c, utilizaremos la notación c, y se
utilizarán además los corchetes para agrupar funciones
1721
f × //
f :=g
%%J
J
J
J
J
J
J
J
J
J
J
J
J Si f 6= g
g //
Figura 1: Ilustración de la Asignación
Propiedad 1
f o ([f := g] o s) = g o s
Propiedad 2
o 6= o′ ∨ f 6= h⇒ h o ([f := g] o′ s) = h o s
2.2.2. Secuenciamiento de instrucciones
La semántica para el secuenciamiento de instrucciones hace uso de un nuevo operador de composición de funciones, denominado rightmost composition (se denota ), y se define como4
Definición 1 (rgmc)
 :: (A 7→ B 7→ C) 7→ (A 7→ C 7→ D) 7→ A 7→ B 7→ D
[f  g] a b
.
= [[f a] [g a]] b
Dado que las instrucciones son abstraídas en funciones, el modelo para el secuenciamiento de las
mismas, es la composición de sus modelos. De esta manera se define su semántica como
Regla 2 (secuenciamiento)
i; j
.
= [i  j]
Es importante notar que tanto el perfil de i como el de j es de la forma Objects 7→ States 7→
States, dado que los mismos son transformadores de estados.
2.2.3. Comandos condicionales
Se define la semántica de los comandos condicionales de manera tradicional utilizando expresiones condicionales del lenguaje funcional
Regla 3 (if)
if b then i else j end .= if b then i else j
La expresión condicional if se encuentra además definida de la siguiente manera
Definición 2 (if)
[if b then i else j end] o s .= if b o s then i o s else j o s
dado que el perfil de b es de la forma Objects 7→ States 7→ Bool y de i, j de la forma Objects 7→
States 7→ States
4El operador  denota la composición de funciones usual
1722
2.2.4. Comandos iterativos
La semántica de los comandos iterativos, se define recursivamente de la siguiente manera
Regla 4 (loop) .
from i until b loop j end .= i  [until b loop j end]
Regla 5 (until) .
until b loop j end .= until b loop j
Definición 3 (until) . Definimos a until como
[until b loop j] o s .= if b o s then s else [j  [until b loop j]] o s
2.2.5. Llamada a rutinas
La semántica de la llamada a rutinas utiliza una variante de la composición de funciones usual
(denotada ) y definida como
Definición 4 ()
 :: (A 7→ B 7→ C) 7→ (C 7→ B 7→ D) 7→ (A 7→ B 7→ D)
[f  g] a b
.
= g ( f a b ) b
Cuando se invoca una rutina f.r(a1, ...,an), donde r tiene parámetros formales x1,...,
xn, antes que r comience a ser ejecutada, ocurre que estos últimos son ligados con los parámetros
efectivos( o actuales ), de modo tal que referencien a los mismos objetos. En el nivel mas básico del
sistema formal, el efecto anterior puede ser modelado en términos de nuestro operador de sustitución
de funciones a través de la siguiente regla
Regla 6 Llamadas a rutinas
Sea r con parámetros formales x1,..., xn, luego
f.r(h1, ..., hn) = [f  x1 := h1]  ... [f  xn := hn]  f  r(x1, ..., xn)
Luego puede demostrarse la siguiente propiedad
Propiedad 3
f  set g(h)  f  g
∗
= h
3. El modelo asociado a una clase
Si queremos especificar que una clase satisface su contrato, el primer paso es la elección de un
modelo asociado la misma.
Dado que estas clases (en particular las mas básicas) están destinadas a modelar álgebras abstractas, sus métodos deberán implementar las funciones de esta ultima, y sus instancias (objetos) se
corresponderán con elementos pertenecientes al tipo de interés del álgebra abstracta.
1723
A m //
L M

B
L M

LAM
µ
// LBM
Figura 2: Corrección del método concreto en base a su especificación abstracta
Ahora, al momento de la verificación de un método m que implementa una función abstracta µ,
deberemos probar que la aplicación de m sobre un objeto o, tiene el mismo efecto que la aplicación
de µ sobre el elemento del tipo de interés que o representa. Es decir, debemos ver que el diagrama de
la figura 2 conmuta
Pero entonces se plantea el interrogante de como es posible obtener este último a partir del objeto
o. Surge entonces el concepto de modelo.
El modelo asociado a una clase lo representamos a través del atributo model, el cual es una función
que tiene como rango el tipo de interés del álgebra abstracta que la clase particular representa, y cuyo
propósito es definir la función de abstracción para cada una de sus instancias, es decir, aquella función
que nos posibilitará obtener el elemento que estos representan.
Así, model aparece como un atributo más de la clase, con el propósito de especificar los contratos
de la misma y probar su corrección. Su definición estará dada, de acuerdo al formalismo que hemos
presentado, en un lenguaje funcional.
Notar que la semántica de model nos arrojará una función que tiene como rango un tipo abstracto, que no forma parte del sistema de tipos de Eiffel. Sin embargo, a nivel de implementación no
habrá problemas puesto que model será usado solo para las aserciones (no apareciendo explícitamente en el cuerpo del programa), y por contrapartida este enfoque nos permitirá escribir post condiciones
concisas y expresivas.
De este modo, se tienen ahora herramientas para definir las funciones de abstracción sobre objetos.
Para ilustrar sobre la forma en la cuál se puede especificar el modelo asociado a una clase damos a
continuación dos ejemplos.
Primero definimos a model para la clase NODE[G], la cuál va a representar una secuencia cuyos
elementos serán las abstracciones de los objetos contenidos en el atributo item de cada uno de los
objetos del tipo NODE[G] que se hallen conectados entre si vía su otro atributo next.
Declaramos a NODE de la siguiente manera:
class NODE[G]
...
feature{NONE}
item: G
next: NODE[G]
...
feature{SPECIFICATION}
model :: Objects 7→ States 7→ [LGM]
1724
model = abst id
abst:: Objects→ Objects 7→ States 7→ [LGM]
abst f o s =
if f o s = ⊥
then [ ]
else [Lf  itemM
∗
: Lf  nextM] o s
...
Aquí, id denota la función identidad, ∗: es el constructor de listas5 que dado un elemento x y una
lista xs retorna una lista cuyo primer elemento es x y el resto de la lista es xs. Mientras que, para
referirnos al rango de la función model definida para una clase A, usaremos la notación LAM. Así por
ejemplo LINTEGERM = Z, al estilo de la semántica denotacional clásica.
A su vez, el operador L M se sobrecarga para denotar la función de abstracción sobre objetos, la
cual se define formalmente como:
Definición 5
L M :: (Objects→ States→ Objects)→ Objects→ States→ A
LfM = f  model
En la definición anterior cabe la posibilidad que la lista sea infinita, en el caso de que un ciclo exista
entre los objetos de la clase NODE. La prohibición de esta condición podría constituir el invariante de
clase de LINKED LIST, la cuál puede implementarse utilizando objetos de tipo NODE.
4. Un caso de estudio
Mostramos en esta sección un ejemplo de la aplicación de todas las herramientas teóricas expuestas en el presente trabajo, donde se pondrán de manifiesto todas las carencias existentes a la hora de
establecer la corrección de clases en ausencia del formalismo aquí presentado, las cuáles son enumeradas en la conclusión. En adición veremos de que manera las post condiciones de los métodos son
de gran ayuda a la hora de modularizar las pruebas.
Dado el siguiente método de la clase LINKED LIST implementado en Eiffel y anotado con
aserciones, probaremos que el cuerpo del ciclo mantiene el invariante6.
in( x: G ): BOOLEAN is
do
from
g := f; b := false
invariant I1
∗
∧ I2
variant
∗
# LgM
until ( b or g = Void ) loop
b := ( x.is equal( g.get item ) ); g := g.get next
5Hay en realidad una sutil diferencia sobre la cual no conviene ahondar en el presente trabajo. Sin embargo esta
omisión no presentara mayores obstáculos
6Para evitar extendernos demasiado en el trabajo, no se expone la prueba de corrección total
1725
end
Result := b
ensure Result
∗
≡ LxM
∗
in LfM
end
donde
I1 : b
∗
≡ LxM
∗
in (LfM
∗
↑ (
∗
# LfM
∗
−
∗
# LgM))
I2 : LfM = (LfM
∗
↑ (
∗
# LfM
∗
−
∗
# LgM))
∗
−‖ LgM
Antes de comenzar con la prueba hacemos las siguientes aclaraciones con respecto a la notación y
funciones usadas:
Las funciones lógico-matemáticas que tienen un asterisco arriba pueden considerarse como las usuales. Si bien no son las mismas funciones, tienen idéntica semántica, difiriendo solo en los tipos de sus
argumentos iniciales7.
x
∗
in xs y retorna verdadero si y solo si el elemento se halla contenido en xs.
La función
∗
# retorna el numero de elementos contenidos en una lista.
xs
∗
↑ n retorna una secuencia con los primeros n elementos de xs; y xs ∗. n retorna el n-ésimo elemento
de la secuencia xs 8.
∗
−‖ , es el operador de concatenación de secuencias.
Así, debemos demostrar, siendo Body el cuerpo del ciclo
(I1
∗
∧ I2)
∗
∧
∗
¬ B
∗
⇒ Body  I1 (1)
El uso de funciones de abstracción, nos permite hablar de propiedades asociadas a las implementaciones. Así, de acuerdo a las post condiciones de los métodos usados en la implementación de la
función in, es posible inferir (prueba omitida) las siguientes propiedades9 que nos servirán en la
prueba de corrección
1. g.get next ∗= LgM
∗
↓
∗
1
2. g.get item ∗=
∗
hd LgM
3. x.is equal(y) ∗≡ LxM ∗= LgM
7A los efectos de brevedad no definimos el operador ∗. Sin embargo esto no dificultara la comprensión de los temas
aquí tratados
8Es claro que estas funciones son parciales, no están definidas en caso que la secuencia posea menos de n elementos
9Estas, nos permiten comprender la función que realizan estos métodos de una manera simple, sin necesidad de revisar
el código para esto
1726
Demostremos la propiedad 1 enunciada anteriormente
Sea [b := ( x.is equal( g.get item ) )][g := g.get next] I1
≡ { hipotesis }
[b := LxM ∗= L
∗
hd LgMM][g := LgM
∗
↓
∗
1] I1
≡ { def. I1; prop. LLxMM ∗= LxM }
[b := LxM ∗=
∗
hd LgM][g := LgM
∗
↓
∗
1]
 b
∗
≡ LxM
∗
in (LfM
∗
↑ (
∗
# LfM
∗
−
∗
# LgM))
≡ { prop. Q(x← E) ∗= [x := E]Q }
LxM ∗=
∗
hd LgM
∗
≡ LxM
∗
in (LfM
∗
↑ (
∗
# LfM
∗
−
∗
# LLgM
∗
↓
∗
1M))
≡ { prop. LLxMM ∗= LxM }
LxM ∗=
∗
hd LgM
∗
≡ LxM
∗
in (LfM
∗
↑ (
∗
# LfM
∗
−
∗
# LgM
∗
↓
∗
1))
≡ { prop. #Xs ↓ 1 = #Xs− 1; algebra }
LxM ∗=
∗
hd LgM
∗
≡ LxM
∗
in (LfM
∗
↑ (
∗
# LfM
∗
−
∗
# LgM
∗
↓
∗
1 +1))
≡ { prop. Xs ↑ (n + 1) = (Xs ↑ n) −‖ (Xs.n); hipotesis (g
∗
6= V oid) }
LxM ∗=
∗
hd LgM
∗
≡ LxM
∗
in (LfM
∗
↑ (
∗
# LfM
∗
−
∗
# LgM)
∗
−‖ LfM ∗. (
∗
# LfM
∗
−
∗
# LgM))
≡ { prop. in }
LxM ∗=
∗
hd LgM
∗
≡ LxM
∗
in (LfM
∗
↑ (
∗
# LfM
∗
−
∗
# LgM))
∗
∨ LxM
∗
in (LfM ∗. (
∗
# LfM
∗
−
∗
# LgM))
≡ { hipotesis; logica }
LxM ∗=
∗
hd LgM
∗
≡ LxM
∗
in ([LfM ∗. (
∗
# LfM
∗
−
∗
# LgM)]
≡ { prop. As −‖ Bs.(#As) = hd Bs }
LxM ∗=
∗
hd LgM
∗
≡ LxM
∗
in ([LfM ∗. (
∗
# LfM
∗
−
∗
# LgM)]
≡ { def. in }
LxM ∗=
∗
hd LgM
∗
≡ LxM ∗=
∗
hd LgM
QED
Así demostramos la implicación planteada en 1.
5. Conclusión
La semántica aquí introducida ha permitido detectar casos de aliasing como el del ejemplo expuesto en la introducción, satisfaciendo así un agudo requerimiento que aparece al razonar con programas
que contienen referencias a memoria. Si bien aún se están sentando las bases de este marco de trabajo
matemático, los resultados que se consiguieron hasta aquí nos hace mirar el futuro con optimismo.
Una de las carencias a la hora de especificar e implementar tipos abstractos de datos en lenguajes
imperativos es que no se dispone de una semántica apropiada para la introducción de funciones de
abstracción. Por ello uno de los logros de esta semántica es permitir trabajar con este tipo de funciones
dentro del paradigma imperativo.
1727
Como se puede apreciar en el caso de estudio, si no contáramos con las herramientas teóricas
que presentamos, no se podría demostrar, mediante formalismos como la lógica de Hoare, que el
método implementa correctamente la operación del álgebra de las secuencias. Principalmente porque
no tendríamos forma de ir de clases concretas a álgebras abstractas.
La función de abstracción asociada a cada clase permite expresar los contratos de una manera más
simple y completa, evitando así subespeficaciones o sobre especificaciones. Por lo que a diferencia
de lo que se establece en [Meyer 03b], los contratos de las clases de librerías como Eiffel Base
no deberían ser extendidos, sino que deberían ser reformulados.
Es importante señalar la utilización de las post condiciones de los métodos utilizados en la prueba
de corrección del ejemplo que aquí presentamos, lo que permite modularizar las demostraciones,
simplificando las mismas.
5.1. Trabajos futuros
El primer paso hacia la prueba de corrección de clases es extender la la semántica hasta ahora
definida al resto de los constructores del lenguaje Eiffel.
Luego, es menester incorporar la semántica dentro de algún demostrador de teoremas de manera
de generar automáticamente las obligaciones de prueba.
Por otro lado es nuestra meta extender el proceso realizado en el presente trabajo a una amplia
variedad de estructuras básicas y algoritmos fundamentales. Esto involucra construir y desarrollar las
teorías asociadas a estas clases, extender los contratos de las mismas, realizar las pruebas y refinar las
mismas en el proceso.
Todos estos trabajos futuros conforman una linea importante de investigación, que se inserta dentro del creciente interés de la comunidad de orientación a objetos en los métodos formales.
